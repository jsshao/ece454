package ece454;

import java.util.*;
import java.util.concurrent.*;
import java.io.*;

public class CC {
    public static void main(String[] args) throws Exception {
    int numThreads = Integer.parseInt(args[0]);
    numThreads = 1;

    // read graph from input file
    //List<Edge> edges = new ArrayList<>();
    //Set<Integer> vertices = new HashSet<>();
    FileInputStream fis = new FileInputStream(args[1]);
    BufferedReader br = new BufferedReader(new InputStreamReader(fis));
    String line = null;
    int v1, v2;
    String[] verts;
    UnionFind<Integer> u = new UnionFind<Integer>();
    while ((line = br.readLine()) != null) {
        verts = line.split("\\s+");
        v1 = Integer.parseInt(verts[0]);
        v2 = Integer.parseInt(verts[1]);
        //vertices.add(v1);
        //vertices.add(v2);
        u.add(v1);
        u.add(v2);
        u.union(v1, v2);
    }
    br.close();
    //UnionFind u = new UnionFind(maxVertex + 1);

    PrintWriter pw = new PrintWriter(new FileWriter(args[2]));
    u.printAll(pw);
/*
    for (int i: vertices) {
        pw.println(i + " " + u.find(i));
    }
*/
    pw.close();
/*
    // start worker threads
    Thread[] threads = new Thread[numThreads];
    UnionFind u = new UnionFind(maxVertex + 1);
    for (int t = 0; t < numThreads; t++) {
        threads[t] = new Thread(new MyRunnable(u, edges));
        threads[t].start();
    }

    // wait for threads to finish
    for (int t = 0; t < numThreads; t++) {
        threads[t].join();
    }

    // generate output
    PrintWriter pw = new PrintWriter(new FileWriter(args[2]));
    for (int i: vertices) {
        pw.println(i + " " + "<replace with component label>");
    }
    pw.close();
*/
    }

    static class MyRunnable implements Runnable {
        private List<Edge> edges;
        private UnionFind union;

        public MyRunnable(UnionFind u, List<Edge> e) {
            edges = e;
            union = u;
        }
        public void run() {
        }
    }

/*
    static public class UnionFind {

      private int[] _parent;
      private int[] _rank;


      public int find(int i) {

        int p = _parent[i];
        if (i == p) {
          return i;
        }
        return _parent[i] = find(p);

      }

      public void union(int i, int j) {
        int root1 = find(i);
        int root2 = find(j);

        if (root2 == root1) return;

        if (_rank[root1] > _rank[root2]) {
          _parent[root2] = root1;
        } else if (_rank[root2] > _rank[root1]) {
          _parent[root1] = root2;
        } else {
          _parent[root2] = root1;
          _rank[root1]++;
        }
      }

      public UnionFind(int max) {
        _parent = new int[max];
        _rank = new int[max];

        for (int i = 0; i < max; i++) {
          _parent[i] = i;
        }
      }
    }
*/
}
